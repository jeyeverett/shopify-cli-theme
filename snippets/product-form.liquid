<form
  id="product-form"
  class="mt-2 md:mt-0 relative h-40"
  :class="{ 'h-auto': !isCartLoading}"
>
  <transition mode="out-in">
    <div v-if="isCartLoading" class="text-center">{% render 'spinner' %}</div>
    <div v-else>
      {% for block in section.blocks %}
        {% case block.type %}
          {% when 'price' %}
            <div
              style="opacity: 0; height: 0"
              :style="{ opacity: isCartLoading ? 0 : 1, height: isCartLoading ? 0 : 'auto' }"
            >
              <div
                class="font-medium text-base md:text-lg lg:text-xl text-gray-700"
                v-if="!isOnSale"
              >
                @{ isAvailable ? toPrice(getPrice.price) : 'Sold Out!' }
              </div>
              <div
                class="
                  font-medium
                  text-base
                  md:text-lg
                  lg:text-xl
                  text-gray-700
                  flex
                  justify-between
                  items-center
                "
                v-else
              >
                <span>
                  <span
                    class="text-gray-500 line-through text-base"
                    v-if="isAvailable"
                  >
                    @{ toPrice(getPrice.price) }
                  </span>
                  <span class="pl-1 text-gray-700">
                    @{ isAvailable ? toPrice(getPrice.compare_at_price) : 'Sold Out!'
                    }
                  </span>
                </span>
                <span v-if="isAvailable"> {% render 'badge-sale' %} </span>
              </div>
            </div>
          {% when 'options' %}
            <div
              v-for="(option, optionIndex) in form.options"
              :key="option.name"
              :class="['my-2 w-full px-4 py-2 border border-gray-500 bg-white hover:bg-gray-200 rounded-sm transition-colors cursor-pointer relative select-none shadow', { 'bg-gray-200': option.visible }]"
              @click="toggleOptionsList(option)"

            >
              {% render 'product-option-select' %}
            </div>
          {% when 'add_to_cart' %}
            <button
              class="
                px-4
                py-2
                border border-gray-700
                rounded-sm
                shadow
                bg-gray-700
                text-white
                hover:bg-transparent hover:text-gray-700
                transition-all
                w-full
              "
              @click="addToCart"
              style="opacity: 0"
              :style="{ opacity: isCartLoading ? 0 : 1 }"
              :class="{ 'pointer-events-none': isCartUpdating, 'pointer-events-none': !isAvailable }"
            >
              <transition mode="out-in">
                <div
                  v-if="isCartUpdating"
                  class="flex justify-center items-center h-6"
                >
                  <span class="relative">
                    <span class="invisible">Add to cart</span>
                    <span
                      class="absolute -top-2 left-5 flex items-center justify-center"
                    >
                      {% render 'spinner-small' %}
                    </span>
                  </span>
                </div>
                <span v-else>Add to cart</span>
              </transition>
            </button>
        {% endcase %}
      {% endfor %}
    </div>
  </transition>
</form>

<script>
  store.vue.components.push(async () => {
    Vue.createApp({
      delimiters: ["@{", "}"],
      data() {
        return {
          variantsMap: {}, //map variant title to variant id
          form: {
            options: [],
            selected: {},
          },
          isCartUpdating: false,
        };
      },
      async created() {
        store.vue.cartLoading(true);
        await this.getProductData();
        store.vue.cartLoading(false);
      },
      computed: {
        variantId() {
          //generate the variant title for lookup in the variantsMap
          const variantTitle = Object.values(this.form.selected).reduce(
            (acc, selection) => acc + " / " + selection
          );
          return this.variantsMap[variantTitle];
        },
        savedProduct() {
          return store.vue.state.products["{{ product.id }}"];
        },
        getPrice() {
          const price = {};
          this.savedProduct.variants.forEach((variant) => {
            if (variant.id === this.variantId) {
              price.compare_at_price = variant.compare_at_price;
              price.price = variant.price;
            }
          });
          return price;
        },
        isAvailable() {
          let available = false;
          this.savedProduct.variants.forEach((variant) => {
            if (variant.id === this.variantId && variant.available === true) {
              available = true;
            }
          });
          return available;
        },
        isOnSale() {
          const { price, compare_at_price } = this.getPrice;
          if (compare_at_price && compare_at_price < price) {
            return true;
          } else {
            return false;
          }
        },
        isCartLoading() {
          return store.vue.state.cart.loading;
        },
      },
      methods: {
        async addToCart(event) {
          event.preventDefault();

          this.isCartUpdating = true;

          const item = {
            id: this.variantId,
            quantity: 1,
          };

          store.vue.addToCart(item).then(() => {
            this.isCartUpdating = false;
            store.saveState();
          });
        },
        async getProductData() {
          const product = this.savedProduct ? this.savedProduct : null;

          if (product && store.vue.isFresh(product.timestamp)) {
            this.mapProductData(product);
          } else {
            const data = await this.fetchProductData();
            this.mapProductData(data);
          }
        },
        mapProductData(data) {
          data.variants.map(
            (variant) => (this.variantsMap[variant.title] = variant.id)
          );

          //map product options to form
          data.options.forEach((option) => {
            this.form.options.push({
              ...option,
              visible: false,
            });
            // sets the default selected option for each option
            this.form.selected[option.name] = option.values[0];
          });
        },
        async fetchProductData() {
          try {
            return await store.vue.getProductData("{{ product.handle }}");
          } catch (err) {
            console.log(err);
          }
        },
        toggleOptionsList(option) {
          this.closeAllOptions();
          option.visible = !option.visible;
        },
        closeAllOptions() {
          this.form.options.forEach((option) => (option.visible = false));
        },
        updateSelected(option, value) {
          this.form.selected[option.name] = value;
          option.visible = false;
        },
        toPrice(price) {
          return "$" + (price / 100).toFixed(2);
        },
      },
    }).mount("#product-form");
  });
</script>

<style>
  .option-item:last-child {
    border-bottom: 1px solid rgba(55, 65, 81, 1);
  }

  .select-option-enter-active {
    animation: animate-modal-bottom 0.2s forwards;
  }

  .select-option-leave-active {
    animation: animate-modal-bottom 0.2s reverse;
  }

  .v-enter-active {
    animation: fade 0.2s forwards;
  }

  .v-leave-active {
    animation: fade 0.2s reverse;
  }

  .lds-ring {
    display: inline-block;
    position: relative;
    width: 80px;
    height: 80px;
  }
  .lds-ring div {
    box-sizing: border-box;
    display: block;
    position: absolute;
    width: 64px;
    height: 64px;
    margin: 8px;
    border: 8px solid darkgrey;
    border-radius: 50%;
    animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
    border-color: darkgrey transparent transparent transparent;
  }
  .lds-ring div:nth-child(1) {
    animation-delay: -0.45s;
  }
  .lds-ring div:nth-child(2) {
    animation-delay: -0.3s;
  }
  .lds-ring div:nth-child(3) {
    animation-delay: -0.15s;
  }
  @keyframes lds-ring {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>
