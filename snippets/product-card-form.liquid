<article
  class="p-4 flex flex-col h-48 relative"
  id="product-card-form-{{ product.id }}"
>
  <span class="flex flex-col">
    {% if show_vendor %}
      <h4 class="text-xs font-medium tracking-wide text-gray-500">
        {% assign vendor = product.vendor | split: '-' %}
        {{ vendor[0] | upcase | truncate: 13 }}
      </h4>
    {% endif %}
    <span class="flex justify-between">
      <h3 class="text-gray-700 font-medium">
        <a href="{{ product.url | within: collection }}">
          {{ product.title | truncate: 30 }}
        </a>
      </h3>
      <p class="text-gray-700 font-medium text-right pr-1">{{ product.price | money }}</p>
    </span>
  </span>

    <transition mode="out-in">
      <div v-if="isCartLoading" class="flex justify-center items-center h-10 mt-6">
        {% render 'spinner' %}
      </div>
      
      <form v-else class="mt-2">
        <ul
          v-for="(option, optionIndex) in form.options"
          :key="variantId + '-' + option.name"
          style="opacity: 0"
          :style="{ opacity: isCartLoading ? 0 : 1 }"
        >
          {% render 'product-card-option-select' %}
        </ul>
        <button
          class="
            px-4
            py-2
            border border-gray-700 rounded-sm
            bg-gray-700
            text-white
            hover:bg-transparent hover:text-gray-700
            transition-all
            absolute
            bottom-3
            right-3
          "
          @click="addToCart"
          style="opacity: 0"
          :style="{ opacity: isCartLoading ? 0 : 1 }"
			    :class="{ 'pointer-events-none': isCartUpdating }"
        >
          <transition 
            mode="out-in"
          >
            <div
              v-if="isCartUpdating"
              class="flex justify-center items-center h-6"
            > 
              <span class="relative">
                <span class="invisible">Add to cart</span>
                <span class="absolute -top-2 left-5 flex items-center justify-center">
                  {% render 'spinner-small' %}
                </span>
              </span>
            </div>
            <span v-else>Add to cart</span>
          </transition>
        </button>
    </transition>
  </form>
</article>

<script>
  store.vue.components.push(async () => { 
		Vue.createApp({
      delimiters: ["@{", "}"],
      data() {
        return {
          variantsMap: {}, //map variant title to variant id
          form: {
            options: [],
            selected: {},
          },
          isCartUpdating: false
        };
      },
      created() {
        store.vue.cartLoading(true);
				this.getProductData().then(() => {
          store.vue.cartLoading(false)
        });
      },
      computed: {
        variantId() {
          //generate the variant title for lookup in the variantsMap
          const variantTitle = Object.values(this.form.selected).reduce(
            (acc, selection) => acc + " / " + selection
          );
          return this.variantsMap[variantTitle];
        },
				savedProduct() {
					return store.vue.state.products["{{ product.id }}"]
				},
        isCartLoading() {
          return store.vue.state.cart.loading;
        },
      },
      methods: {
        async addToCart(event) {
          event.preventDefault();

          this.isCartUpdating = true;

          const item = {
            id: this.variantId,
            quantity: 1,
          };

          store.vue.addToCart(item).then(() => {
            this.isCartUpdating = false;
            store.saveState();
          });
        },
				async getProductData() {
					const product = this.savedProduct ? this.savedProduct :	null;
          console.log(product);

					if (product && store.vue.isFresh(product.timestamp)) {
            console.log('product is fresh')
            this.mapProductData(product);
					} else {
            console.log('product is stale')

						const data = await this.fetchProductData();
						this.mapProductData(data);
					}
				},
				mapProductData(data) {
					data.variants.map(
						(variant) => (this.variantsMap[variant.title] = variant.id)
					);

					//map product options to form
					data.options.forEach((option) => {
						this.form.options.push({
							...option,
							visible: false,
						});
						// sets the default selected option for each option
						this.form.selected[option.name] = option.values[0];
					});
				},
				async fetchProductData() {
					try {
						return await store.vue.getProductData("{{ product.handle }}");
					} catch (err) {
						console.log(err);
					}
				},				

        toggleOptionsList(option) {
          option.visible = !option.visible;
        },
        closeAllOptions() {
          this.form.options.forEach((option) => (option.visible = false));
        },
        isSelected(option, value) {
          return this.form.selected[option.name] === value;
        },
        updateSelected(option, value) {
          this.form.selected[option.name] = value;
          option.visible = false;
        },
      },
    }).mount("#product-card-form-{{ product.id }}")
	});

    
  // store.vue.components.push(productCardComponent[{{ product.id }}]);
</script>

<style scoped>
  .selected-option {
    text-decoration: line-through;
  }

  .v-enter-active {
    animation: fade .2s forwards;
  }

  .v-leave-active {
    animation: fade .2s reverse;
  }
</style>
