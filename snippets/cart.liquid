<div class="flex flex-col items-center justify-center w-full" id="cart">
  <transition mode="out-in">
    <div v-if="isCartLoading" class="flex justify-center items-center h-10">
      <div class="lds-ring mt-20">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </div>
    <div
      v-else
      class="w-full"
      style="opacity: 0"
      :style="{ opacity: isCartLoading ? 0 : 1 }"
    >
      <ul class="w-full sm:w-5/6 md:w-3/4 xl:w-2/3 mx-auto">
        <div class="grid grid-cols-4 auto-cols-fr gap-4">
          <span
            class="
              col-span-2
              text-center text-sm
              sm:text-base
              text-gray-700
              font-medium
              pb-2
              border-b border-gray-400
            "
            >Product</span
          >
          <span
            class="
              col-span-1
              text-center text-sm
              sm:text-base
              text-gray-700
              font-medium
              pb-2
              border-b border-gray-400
            "
            >Quantity</span
          >
          <span
            class="
              col-span-1
              text-center text-sm
              sm:text-base
              text-gray-700
              font-medium
              pb-2
              border-b border-gray-400
            "
            >Price</span
          >
        </div>
        <li
          class="grid grid-cols-4 auto-cols-fr gap-4"
          v-for="item in cartData.items"
          :key="item.id"
        >
          <a :href="item.url" v-if="item.image">
            <img
              class="h-16 xs:h-20 sm:h-24"
              :src="item.image"
              :alt="item.title"
            />
          </a>
          <div class="flex items-center justify-start">
            <span>
              <h3 class="text-xs xs:text-sm font-semibold text-gray-700">
                <a :href="item.url" class="">@{ item.product_title }</a>
              </h3>
              <p class="text-xs xs:text-sm font-light text-gray-700">
                @{ item.variant_title }
              </p>
            </span>
          </div>
          <p
            class="
              text-xs
              xs:text-sm
              font-semibold
              text-right text-gray-700
              flex
              items-center
              justify-center
            "
          >
            <span
              class="
                flex
                items-center
                justify-center
                h-6
                w-full
                px-2
                py-1
                mt-2
                relative
              "
            >
              {% render 'cart-quantity' %}
            </span>
          </p>
          <p
            class="
              text-xs
              xs:text-sm
              font-semibold
              text-right text-gray-700
              flex
              items-center
              justify-center
            "
          >
            @{ toPrice(item.price) }
          </p>
        </li>
      </ul>
    </div>
  </transition>
</div>

<script>
  const cartPage = ((state) => Vue.createApp({
      delimiters: ["@{", "}"],
      data() {
        return {};
      },
      computed: {
        cartData() {
          return store.vue.state.cart.data;
        },
        cartCount() {
          return this.cartData.item_count;
        },
        isCartLoading() {
          return store.vue.state.cart.loading;
        },
      },
      methods: {
        toPrice(price) {
          return "$" + (price / 100).toFixed(2);
        },
        incItem(item) {
          store.vue.cartLoading(true);
          store.vue.incCartItem(item).then(() => store.vue.cartLoading(false));
        },
        decItem(item) {
          store.vue.cartLoading(true);
          store.vue.decCartItem(item).then(() => store.vue.cartLoading(false));
        },
      },
    }).mount("#cart"));

  store.vue.components.push(cartPage);
</script>
